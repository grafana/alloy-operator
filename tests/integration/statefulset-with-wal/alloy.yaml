---
apiVersion: collectors.grafana.com/v1alpha1
kind: Alloy
metadata:
  name: alloy-metrics
spec:
  controller:
    type: statefulset
    replicas: 2
    enableStatefulSetAutoDeletePVC: true
    volumeClaimTemplates:
      - metadata:
          name: alloy-wal
        spec:
          accessModes: ["ReadWriteOnce"]
          storageClassName: "standard"
          resources:
            requests:
              storage: 100Mi

  alloy:
    clustering:
      name: alloy-metrics
      enabled: true

    extraEnv:
      - name: CLUSTER_NAME
        value: statefulset-with-wal

    storagePath: /var/lib/alloy
    mounts:
      extra:
        - name: alloy-wal
          mountPath: /var/lib/alloy
    configMap:
      content: |-
        discovery.kubernetes "alloy_pods" {
          role = "pod"
          selectors {
            role = "pod"
            label = "app.kubernetes.io/name=alloy"
          }
        }

        prometheus.scrape "alloy_pods" {
          targets    = discovery.kubernetes.alloy_pods.targets
          scrape_interval = "60s"
          clustering {
            enabled = true
          }
          forward_to = [prometheus.remote_write.local_prom.receiver]
        }

        discovery.kubernetes "nodes" {
          role = "node"
        }

        prometheus.scrape "kubelet" {
          targets  = discovery.kubernetes.nodes.targets
          job_name = "integrations/kubernetes/kubelet"
          scheme   = "https"
          scrape_interval = "60s"
          bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

          tls_config {
            ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
            insecure_skip_verify = true
            server_name = "kubernetes"
          }

          clustering {
            enabled = true
          }

          forward_to = [prometheus.remote_write.local_prom.receiver]
        }

        prometheus.remote_write "local_prom" {
          endpoint {
            url = "http://prometheus-server.prometheus.svc:9090/api/v1/write"

            write_relabel_config {
              replacement = sys.env("CLUSTER_NAME")
              target_label = "cluster"
            }
          }
        }
